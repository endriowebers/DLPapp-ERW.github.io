[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "1 - Selecione o arquivo que deseja\n2 - Selecione o formato e as linhas e/ou colunas a serem exibidas\n3 - altere o número de linhas da tabela a ser exibido em “show”\n4 - Selecione a tabela e a copie (Crtl+C)\n5 - Cole (Ctrl+V) no seu editor de tabelas de preferência\nOBS: A função de exportação de arquivos não está funcionando devido ao pacote para contrução dessa modalidade de aplicativo estar em desenvolvimento.\n#| standalone: true\n#| viewerHeight: 1000\n\n\nlibrary(shiny)\nlibrary(DT)\nlibrary(readr)\nlibrary(openxlsx)\nlibrary(dplyr)\nlibrary(reshape2)\nlibrary(shinyjs)\nlibrary(shinyWidgets)\n\n# Defina a interface do usuário (UI)\nui &lt;- fluidPage(\n  titlePanel(\"Extrair e Exibir Dados do Leitor de Placas\"),\n  useShinyjs(),\n  sidebarLayout(\n    sidebarPanel(\n      # Adicione um botão de upload de arquivo CSV\n      fileInput(\"csvFile\", \"Selecione um arquivo CSV (.csv)\", accept = \".csv\"),\n      # Botão para fechar o arquivo\n      actionButton(\"closeButton\", \"Fechar Arquivo\", class = \"btn-danger\"),\n      # Botões interruptores para colunas\n      checkboxGroupButtons(\n        inputId = \"visibleColumns\",\n        label = \"Selecionar Colunas Visíveis\",\n        choices = c(\"Coluna1\", \"Coluna2\", \"Coluna3\", \"Coluna4\", \"Coluna5\", \"Coluna6\", \"Coluna7\", \"Coluna8\", \"Coluna9\", \"Coluna10\", \"Coluna11\", \"Coluna12\"),\n        selected = c(\"Coluna1\", \"Coluna2\", \"Coluna3\", \"Coluna4\", \"Coluna5\", \"Coluna6\", \"Coluna7\", \"Coluna8\", \"Coluna9\", \"Coluna10\", \"Coluna11\", \"Coluna12\"),\n        direction = \"vertical\"\n      ),\n      # Botões interruptores para linhas\n      checkboxGroupButtons(\n        inputId = \"visibleRows\",\n        label = \"Selecionar Linhas Visíveis\",\n        choices = LETTERS[1:8],\n        selected = LETTERS[1:8],\n        direction = \"vertical\"\n      ),\n      # Botão colorido para exportar dados\n      downloadButton(\"exportHorizontal\", \"Exportar Tabela Horizontal\", class = \"btn-success\"),\n      downloadButton(\"exportVertical\", \"Exportar Tabela Vertical\", class = \"btn-warning\")\n    ),\n    mainPanel(\n      # Abas para exibir os dados na horizontal e vertical\n      tabsetPanel(\n        tabPanel(\"Horizontal\", DTOutput(\"table_horizontal\")),\n        tabPanel(\"Vertical\", DTOutput(\"table_vertical\")),\n        id = \"tabs\"\n      ),\n      # Rodapé com informações de desenvolvedor\n      tags$footer(\n        tags$p(\"Desenvolvido por Endrio Webers\"),\n        tags$p(\"Email: endriowebers@gmail.com\")\n      )\n    )\n  )\n)\n\n# Função para substituir \"EP\" por NA em formato numérico\nreplace_EP_with_NA &lt;- function(x) {\n  x &lt;- as.numeric(x)\n  x[x == \"EP\"] &lt;- NA\n  return(x)\n}\n\n# Defina a lógica do servidor (Server)\nserver &lt;- function(input, output) {\n  data &lt;- reactiveVal(NULL)\n  \n  observeEvent(input$csvFile, {\n    inFile &lt;- input$csvFile\n    if (is.null(inFile)) return(NULL)\n    \n    # Leia o conteúdo completo do arquivo CSV\n    file_content &lt;- read_file(inFile$datapath)\n    \n    # Divida o conteúdo em linhas\n    lines &lt;- strsplit(file_content, \"\\n\")[[1]]\n    \n    # Encontre o início dos dados desejados (linhas que começam com \"A, B, C, ...\")\n    data_start &lt;- 46\n    \n    # Pegue apenas as linhas desejadas\n    data_lines &lt;- lines[data_start:(data_start + 7)]\n    \n    # Crie um data frame com as linhas desejadas\n    df &lt;- read.csv(text = data_lines, header = FALSE, dec = \",\", sep = \",\")\n    \n    # Substitua \"EP\" por NA em formato numérico em todo o data frame\n    df &lt;- df %&gt;% mutate_all(~replace_EP_with_NA(.))\n    \n    # Substitua os pontos (.) por vírgulas (,) em todos os dados\n    df &lt;- df %&gt;% mutate_all(~gsub(\"\\\\.\", \",\", .)) \n    \n    # Adicione os cabeçalhos ao data frame\n    colnames(df) &lt;- c(\"Linha\", \"Coluna1\", \"Coluna2\", \"Coluna3\", \"Coluna4\", \"Coluna5\", \"Coluna6\", \"Coluna7\", \"Coluna8\", \"Coluna9\", \"Coluna10\", \"Coluna11\", \"Coluna12\")\n    \n    # Transforme os valores na coluna \"Linha\" em letras de A até H mantendo a sequência\n    df$Linha &lt;- LETTERS[1:8]\n    \n    data(df)\n  })\n  \n  # Renderize a tabela organizada com os dados na horizontal\n  output$table_horizontal &lt;- renderDT({\n    if (!is.null(data())) {\n      df &lt;- data()\n      selected_columns &lt;- input$visibleColumns\n      selected_rows &lt;- input$visibleRows\n      df &lt;- df %&gt;% filter(Linha %in% selected_rows)\n      df &lt;- df[, c(\"Linha\", selected_columns)]\n      datatable(df, options = list(pageLength = 10, scrollX = TRUE))\n    }\n  })\n  \n  # Renderize a tabela organizada com os dados na vertical (derretidos)\n  output$table_vertical &lt;- renderDT({\n    if (!is.null(data())) {\n      df &lt;- data()\n      selected_columns &lt;- input$visibleColumns\n      selected_rows &lt;- input$visibleRows\n      df &lt;- df %&gt;% filter(Linha %in% selected_rows)\n      df_melted &lt;- df %&gt;%\n        select(Linha, selected_columns) %&gt;%\n        melt(id.vars = \"Linha\", variable.name = \"Coluna\", value.name = \"Absorbância\")\n      datatable(df_melted, options = list(pageLength = 10, scrollX = TRUE))\n    }\n  })\n  \n  observeEvent(input$closeButton, {\n    data(NULL)\n  })\n  \n  # Botão para exportar dados da tabela horizontal\n  output$exportHorizontal &lt;- downloadHandler(\n    filename = function() {\n      paste(\"dados_exportados_horizontal.xlsx\")\n    },\n    content = function(file) {\n      if (!is.null(data())) {\n        df &lt;- data()\n        selected_columns &lt;- input$visibleColumns\n        selected_rows &lt;- input$visibleRows\n        df &lt;- df %&gt;% filter(Linha %in% selected_rows)\n        df &lt;- df[, c(\"Linha\", selected_columns)]\n        write.xlsx(df, file)\n      }\n    }\n  )\n  \n  # Botão para exportar dados da tabela vertical\n  output$exportVertical &lt;- downloadHandler(\n    filename = function() {\n      paste(\"dados_exportados_vertical.xlsx\")\n    },\n    content = function(file) {\n      if (!is.null(data())) {\n        df &lt;- data()\n        selected_columns &lt;- input$visibleColumns\n        selected_rows &lt;- input$visibleRows\n        df &lt;- df %&gt;% filter(Linha %in% selected_rows)\n        df_melted &lt;- df %&gt;%\n          select(Linha, selected_columns) %&gt;%\n          melt(id.vars = \"Linha\", variable.name = \"Coluna\", value.name = \"Absorbância\")\n        write.xlsx(df_melted, file)\n      }\n    }\n  )\n}\n\n# Crie o aplicativo Shiny\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n {{&lt; fa brands github &gt;}}  https://github.com/endriowebers"
  },
  {
    "objectID": "index.html#organizador-dos-dados-do-leitor-de-placas",
    "href": "index.html#organizador-dos-dados-do-leitor-de-placas",
    "title": "",
    "section": "",
    "text": "1 - Selecione o arquivo que deseja\n2 - Selecione o formato e as linhas e/ou colunas a serem exibidas\n3 - altere o número de linhas da tabela a ser exibido em “show”\n4 - Selecione a tabela e a copie (Crtl+C)\n5 - Cole (Ctrl+V) no seu editor de tabelas de preferência\nOBS: A função de exportação de arquivos não está funcionando devido ao pacote para contrução dessa modalidade de aplicativo estar em desenvolvimento.\n#| standalone: true\n#| viewerHeight: 1000\n\n\nlibrary(shiny)\nlibrary(DT)\nlibrary(readr)\nlibrary(openxlsx)\nlibrary(dplyr)\nlibrary(reshape2)\nlibrary(shinyjs)\nlibrary(shinyWidgets)\n\n# Defina a interface do usuário (UI)\nui &lt;- fluidPage(\n  titlePanel(\"Extrair e Exibir Dados do Leitor de Placas\"),\n  useShinyjs(),\n  sidebarLayout(\n    sidebarPanel(\n      # Adicione um botão de upload de arquivo CSV\n      fileInput(\"csvFile\", \"Selecione um arquivo CSV (.csv)\", accept = \".csv\"),\n      # Botão para fechar o arquivo\n      actionButton(\"closeButton\", \"Fechar Arquivo\", class = \"btn-danger\"),\n      # Botões interruptores para colunas\n      checkboxGroupButtons(\n        inputId = \"visibleColumns\",\n        label = \"Selecionar Colunas Visíveis\",\n        choices = c(\"Coluna1\", \"Coluna2\", \"Coluna3\", \"Coluna4\", \"Coluna5\", \"Coluna6\", \"Coluna7\", \"Coluna8\", \"Coluna9\", \"Coluna10\", \"Coluna11\", \"Coluna12\"),\n        selected = c(\"Coluna1\", \"Coluna2\", \"Coluna3\", \"Coluna4\", \"Coluna5\", \"Coluna6\", \"Coluna7\", \"Coluna8\", \"Coluna9\", \"Coluna10\", \"Coluna11\", \"Coluna12\"),\n        direction = \"vertical\"\n      ),\n      # Botões interruptores para linhas\n      checkboxGroupButtons(\n        inputId = \"visibleRows\",\n        label = \"Selecionar Linhas Visíveis\",\n        choices = LETTERS[1:8],\n        selected = LETTERS[1:8],\n        direction = \"vertical\"\n      ),\n      # Botão colorido para exportar dados\n      downloadButton(\"exportHorizontal\", \"Exportar Tabela Horizontal\", class = \"btn-success\"),\n      downloadButton(\"exportVertical\", \"Exportar Tabela Vertical\", class = \"btn-warning\")\n    ),\n    mainPanel(\n      # Abas para exibir os dados na horizontal e vertical\n      tabsetPanel(\n        tabPanel(\"Horizontal\", DTOutput(\"table_horizontal\")),\n        tabPanel(\"Vertical\", DTOutput(\"table_vertical\")),\n        id = \"tabs\"\n      ),\n      # Rodapé com informações de desenvolvedor\n      tags$footer(\n        tags$p(\"Desenvolvido por Endrio Webers\"),\n        tags$p(\"Email: endriowebers@gmail.com\")\n      )\n    )\n  )\n)\n\n# Função para substituir \"EP\" por NA em formato numérico\nreplace_EP_with_NA &lt;- function(x) {\n  x &lt;- as.numeric(x)\n  x[x == \"EP\"] &lt;- NA\n  return(x)\n}\n\n# Defina a lógica do servidor (Server)\nserver &lt;- function(input, output) {\n  data &lt;- reactiveVal(NULL)\n  \n  observeEvent(input$csvFile, {\n    inFile &lt;- input$csvFile\n    if (is.null(inFile)) return(NULL)\n    \n    # Leia o conteúdo completo do arquivo CSV\n    file_content &lt;- read_file(inFile$datapath)\n    \n    # Divida o conteúdo em linhas\n    lines &lt;- strsplit(file_content, \"\\n\")[[1]]\n    \n    # Encontre o início dos dados desejados (linhas que começam com \"A, B, C, ...\")\n    data_start &lt;- 46\n    \n    # Pegue apenas as linhas desejadas\n    data_lines &lt;- lines[data_start:(data_start + 7)]\n    \n    # Crie um data frame com as linhas desejadas\n    df &lt;- read.csv(text = data_lines, header = FALSE, dec = \",\", sep = \",\")\n    \n    # Substitua \"EP\" por NA em formato numérico em todo o data frame\n    df &lt;- df %&gt;% mutate_all(~replace_EP_with_NA(.))\n    \n    # Substitua os pontos (.) por vírgulas (,) em todos os dados\n    df &lt;- df %&gt;% mutate_all(~gsub(\"\\\\.\", \",\", .)) \n    \n    # Adicione os cabeçalhos ao data frame\n    colnames(df) &lt;- c(\"Linha\", \"Coluna1\", \"Coluna2\", \"Coluna3\", \"Coluna4\", \"Coluna5\", \"Coluna6\", \"Coluna7\", \"Coluna8\", \"Coluna9\", \"Coluna10\", \"Coluna11\", \"Coluna12\")\n    \n    # Transforme os valores na coluna \"Linha\" em letras de A até H mantendo a sequência\n    df$Linha &lt;- LETTERS[1:8]\n    \n    data(df)\n  })\n  \n  # Renderize a tabela organizada com os dados na horizontal\n  output$table_horizontal &lt;- renderDT({\n    if (!is.null(data())) {\n      df &lt;- data()\n      selected_columns &lt;- input$visibleColumns\n      selected_rows &lt;- input$visibleRows\n      df &lt;- df %&gt;% filter(Linha %in% selected_rows)\n      df &lt;- df[, c(\"Linha\", selected_columns)]\n      datatable(df, options = list(pageLength = 10, scrollX = TRUE))\n    }\n  })\n  \n  # Renderize a tabela organizada com os dados na vertical (derretidos)\n  output$table_vertical &lt;- renderDT({\n    if (!is.null(data())) {\n      df &lt;- data()\n      selected_columns &lt;- input$visibleColumns\n      selected_rows &lt;- input$visibleRows\n      df &lt;- df %&gt;% filter(Linha %in% selected_rows)\n      df_melted &lt;- df %&gt;%\n        select(Linha, selected_columns) %&gt;%\n        melt(id.vars = \"Linha\", variable.name = \"Coluna\", value.name = \"Absorbância\")\n      datatable(df_melted, options = list(pageLength = 10, scrollX = TRUE))\n    }\n  })\n  \n  observeEvent(input$closeButton, {\n    data(NULL)\n  })\n  \n  # Botão para exportar dados da tabela horizontal\n  output$exportHorizontal &lt;- downloadHandler(\n    filename = function() {\n      paste(\"dados_exportados_horizontal.xlsx\")\n    },\n    content = function(file) {\n      if (!is.null(data())) {\n        df &lt;- data()\n        selected_columns &lt;- input$visibleColumns\n        selected_rows &lt;- input$visibleRows\n        df &lt;- df %&gt;% filter(Linha %in% selected_rows)\n        df &lt;- df[, c(\"Linha\", selected_columns)]\n        write.xlsx(df, file)\n      }\n    }\n  )\n  \n  # Botão para exportar dados da tabela vertical\n  output$exportVertical &lt;- downloadHandler(\n    filename = function() {\n      paste(\"dados_exportados_vertical.xlsx\")\n    },\n    content = function(file) {\n      if (!is.null(data())) {\n        df &lt;- data()\n        selected_columns &lt;- input$visibleColumns\n        selected_rows &lt;- input$visibleRows\n        df &lt;- df %&gt;% filter(Linha %in% selected_rows)\n        df_melted &lt;- df %&gt;%\n          select(Linha, selected_columns) %&gt;%\n          melt(id.vars = \"Linha\", variable.name = \"Coluna\", value.name = \"Absorbância\")\n        write.xlsx(df_melted, file)\n      }\n    }\n  )\n}\n\n# Crie o aplicativo Shiny\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n {{&lt; fa brands github &gt;}}  https://github.com/endriowebers"
  }
]